--------------------------------------------------------------PLSQL Practice--------------------------------------------------------------
/*-------------Q1 Started-----------
Difference between Delete and truncate proving some points.
•	Delete is a DML command and truncate is a DDL command where DML commands are not auto committed and DDL commands are auto committed.
•	We can use where condition in delete but in truncate where condition is not allowed.
•	Delete is slower compared to truncate since deleted records are stored in undo table space for rollback and 
    truncate is faster cause it doesn’t keeps the data in undo table space.
•	Triggers will get fired while applying delete. Triggers will not get fired in truncate.
•	Delete won’t reclaim the space because it moves the data into undo table space for rollback and truncate reclaim the space instantly.
•	Delete won’t reset high level of watermark even if commit applied explicitly, but truncate reset high level of water mark instantly.
•	From 12c onwards we can use “on delete cascade” in the child table for deletion of data from both parent and child table 
    likewise in truncate we can able to truncate data from parent and child table at once applying “truncate table tb_name cascade”.

Note: When we apply delete on parent table why data gets deleted from child table? 
      But in the same way when we apply delete on the child table data only gets deleted from the child table not from the parent table why? 
      Same applies to truncate also.
      • It is because data flows from parent to child not from child to parent.

      What if I want to delete the records and get faster response to load in the table, is there any way?
      • Yes, there is a way, we can create a backup of that table and apply truncate then we can load the data as per our need without applying delete directly instead we can filter out the records through query and load the data in the table.
*/

--Pont1:Triggers will get fired while applying delete. Triggers will not get fired in truncate. To Prove this below is the code

--Loop to insert some records in table
set SERVEROUTPUT on;
declare 
v_count number;
BEGIN
    for v_count in 1..10
    loop
    insert into tb1 values(v_count);
    end loop;
end;    

--This raise the error if we execute delete command
create or replace trigger tr_delete
before delete on tb1 for EACH ROW
BEGIN
    raise_application_error(-20000,'Trigger is fired');
end;

--When we execute delete the trigger got raise hence its prove that trigger gets fire when we execute delete
delete from tb1;

--Trigger doesnt fire hence its prove that truncate doesnt raise trigger
TRUNCATE TABLE tb1;

--Point2: Delete is slower as compaired to truncate and delete contains watermark but truncate doesnt lets prove this
--I have created this table for test
create table delete_truncate_slow_test
(
    function_name VARCHAR2(100),
    Apply_status VARCHAR2(100)
); 

--I check the size of the table which is 0.0 MB
SELECT segment_name , bytes/1024/1024 AS size_mb
FROM user_segments
WHERE segment_name = 'DELETE_TRUNCATE_SLOW_TEST';

--Inserted 8 million records in table
INSERT into delete_truncate_slow_test select 'Delete','Yes' from dual connect by level<=1000000;

-- Check the size of the table which is 143 MB
SELECT segment_name , bytes/1024/1024 AS size_mb
FROM user_segments
WHERE segment_name = 'DELETE_TRUNCATE_SLOW_TEST';

/*Now i applied delete which took me 5 sec move the records from original table to undo space and commit but 
still i can see the table space which is still showing 143 MB that means it contains the watermark also*/
delete from delete_truncate_slow_test;

/*I applied Truncate after delete which takes 0.3 seconds which is faster than delete and also 
it removes the watermark, means it recliam the space that is used by table.*/
truncate table DELETE_TRUNCATE_SLOW_TEST;

--Point3: Proving how truncate table tb_name cascade works
--First i created Two table and inserted data
CREATE TABLE CHILD_TABLE  ("CHILD_ID" NUMBER,"PARENT_ID" NUMBER,"DESCRIPTION" VARCHAR2(100), 
CONSTRAINT "FK_CHILD" FOREIGN KEY ("CHILD_ID") REFERENCES "PARENT_TABLE" ("PARENT_ID") ON DELETE CASCADE ENABLE );
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (101, 101, 'Root Category');
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (102, 102, 'Sub Category A');
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (103, 103, 'Sub Category B');
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (104, 104, 'Sub Category A1');
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (105, 105, 'Sub Category A2');
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (106, 106, 'Sub Category B1');
INSERT INTO CHILD_TABLE (CHILD_ID, PARENT_ID, DESCRIPTION) VALUES (107, 107, 'Sub Category B2');

CREATE TABLE PARENT_TABLE("PARENT_ID" NUMBER,"NAME" VARCHAR2(50),PRIMARY KEY ("PARENT_ID"));
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (101, 'Item 1');
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (102, 'Item 2');
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (103, 'Item 3');
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (104, 'Item 4');
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (105, 'Item 5');
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (106, 'Item 6');
INSERT INTO PARENT_TABLE (PARENT_ID, NAME) VALUES (107, 'Item 7');

/*In this parent table if i apply delete command on parent table the asociated data in child table will get deleted
in the same way if i apply truncate table tb_name cascade then it will truncate both of the table*/
truncate table PARENT_TABLE cascade;
-----------Q1 End------------

/*
---------Q2 STARTED------------
Difference between procedure and function
• A Function must return a value while using return keyword whereas a procedure may be or may not be return a value using out or inout parameter.
• A Function can be call from a select statement whereas a procedure cannot be call from a select statement.
• A Function can be used for computational purposes whereas a procedure used for logical data flow purposes.
• We can use DML statements inside procedure without any problem, 
  but in function we cannot use DML statements directly inside function through select statement, 
  to make it possible we can use pragma autonomous transaction for DML statements. 
• Return keyword used in function to return a value and in procedure return keyword used to exit from the procedure.
• From 12.1 onwards we can create function and procedure for the part of "with" clause statement.
*/

--We are just testing how return keyword works inside procedure
create or replace procedure sp_update (
    p_empno in number,
    p_sal   in number,
    p_out   out number 
)
as
begin
    
    if p_empno is null THEN --When empno is null then it returns nothing
    return; --This return keyword just used for out from the procedure
    end if;

    update emp_sal set sal=p_sal where EMP_NO=p_empno;
    select sal into p_out from emp_sal where EMP_NO=p_empno;

    EXCEPTION
    WHEN others THEN
    DBMS_OUTPUT.PUT_LINE('No data found');

end;

DECLARE
    v_rows_updated NUMBER;
BEGIN
    sp_update(p_empno=>1,p_sal=>10400,p_out=>v_rows_updated);
    DBMS_OUTPUT.PUT_LINE('Rows updated: ' || v_rows_updated);
END;
/

--function with a return keyword
CREATE OR REPLACE FUNCTION fn_avgsal (
   p_empid NUMBER
)
RETURN VARCHAR2
IS
    -- Variable declarations
    v_avgsal NUMBER;
BEGIN
    -- Function logic
    SELECT avg(salary) INTO v_avgsal
    FROM employees
    WHERE employee_id = p_empid;

    RETURN TO_CHAR(v_avgsal);
END fn_avgsal;
/

--From 12.1 onwards we can create function and procedure for the part of "with" clause statement.
--Function
WITH
  FUNCTION get_bonus(p_salary NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN p_salary * 0.10;
  END; --It's only usable within this SQL query and doesn't persist in the database.
SELECT employee_id,
       first_name,
       salary,
       get_bonus(salary) AS bonus
FROM   employees;

--Procedure
DECLARE
  v_emp_id   employees.employee_id%TYPE := 101;
  v_new_sal  employees.salary%TYPE := 60000;
BEGIN
  WITH
    PROCEDURE update_salary(p_emp_id NUMBER, p_salary NUMBER) IS
    BEGIN
      UPDATE employees
      SET salary = p_salary
      WHERE employee_id = p_emp_id;
    END;
  BEGIN
    update_salary(v_emp_id, v_new_sal);
    COMMIT;
  END;
END;
/*
Note: Can a function compile without a return keyword?
Yes a function can be compile witout a return keyword but cant be call from a select statement.
*/
---------Q2 END----------------
/*
---------Q3 STARTED------------
Difference between NVL,NVL2,NULLIF,COALESCE?

NVL:Nvl function returns the default value at the place of null. And it takes only 2 arguments
NVL2:Nvl2 returns the second value when we have value at first place and returns 3rd value when we have null value at first place.
     it takes 3 arguments
NULLIF: Nullif function returns null when both value in arg1,arg2 are same and if not same it returns first arg1. it takes two arg. 
COALESCE: This function returns the first not null value.

*/

--Testing NVL
select nvl(null,'Subham') from dual; --result subham
select nvl(NULL,2) from dual; --result 2
select nvl(2,'Subh') from dual; --conversion error
select nvl(null,null) from dual; --result null

--Testing NVL2
select nvl2(null,'A','B') from dual;-- returns 'B'
select nvl2(4,1,2) from dual; -- returns 1
select nvl2(1,'A','B') from dual; -- returns A
select nvl2('A',1,2) from dual; -- returns 1
select nvl2('A',null,2) from dual; -- returns null

--Tetsing nullif
select nullif('A','B') from dual;--returns A
select nullif(null,'B') from dual;--data type mismatch
select nullif('A',null) from dual;--returns A
select nullif('A',2) from dual;--datatype mismatch error
select nullif('A','A') from dual;--returns null

--Testing coalesce
select coalesce('A','B','C') from dual;-- returns A
select coalesce(null,'B','C') from dual;-- returns B
select coalesce(null,null,'C') from dual;-- returns C
select coalesce(null,null,null) from dual;-- returns null
select coalesce(null,null,2) from dual;-- returns 2
select coalesce(null,'A',2) from dual;-- datatype mismatch error
---------Q3 END----------------

/*
------------------Q4 started--------------
What is the difference between rank and dense rank?
Rank(): Normally we assign the same rank in rank function and skip the next rank.
dense_rank():dense rank does opposit compaire to rank. it doesnt skip the next rank although it keeps the same rank.
------------------Q4 end--------------
*/

/*
------------------Q5 started----------
What is SQL?
=>Sql stands for structure query language.
=>It is used to communicate with database.
=>Sql consists of 7 types DCL,DDL,DML,TCL,DQL,system controll statement(alter system),session controll statement(alter session)
------------------Q5 end--------------
*/

/*
------------------Q6 started----------

------------------Q6 end--------------
*/

/*
------------------Q10 started----------
What is the difference between decode and case?
=>Decode is oracle specific and case is a ansi standard which can be accessed in any sql language. Both satishfies the if else statement.
=>In Decode we can only use '=' operator but in case we can use all operator like relational and logical.
=>Decode can accept different datatype means internally it can convert the number datatype to char datatype but in case it wont.
=>With Decode we cannot dirrectly assign the result to a variable as we do normaly with other function inside anonymous block.
 but it can be used with select statement where we can assign the variable with into clause. 
 In case expression we assign the result diirectly to the vriable or as a part of standalone.
*/
CREATE TABLE student_tab (
    id      NUMBER,
    name    VARCHAR2(100),
    mark    NUMBER,
    result  VARCHAR2(1)
);

insert into student_tab values(1, 'SCOTT', 85, 'P');
insert into student_tab values(2, 'ALLEN', 30, 'F');
insert into student_tab values(3, 'SMITH', 45, 'P');
insert into student_tab values(4, 'ADAMS', 25, 'F');
insert into student_tab values(5, 'JAMES', 55, NULL);

rename student_tab to student;

--Test 1
select id,name,mark,decode(result,'P','PASS','F','FAIL','NO DATA FOUND') result from student;
select id,name,mark,case result when 'P' then 'PASS'
                                when 'F' then 'FAIL'
                                else 'NOT FOUND' end
 result from student;
--or here we can pass any operator for logical data flow
select id,name,mark,case when result='P' then 'PASS'
                                when result='F' then 'FAIL'
                                else 'NOT FOUND' end
result from student;

--Test 2
select decode(:input,1,'PASS','F','FAIL','NO DATA FOUND') result from dual;
select case :input when 1 then 'PASS'
                                when '2' then 'FAIL'
                                else 'NOT FOUND' end result
from dual;
 
--Test 3 like with this function we can use.
set SERVEROUTPUT on;
declare
v_var  VARCHAR2(10);
BEGIN
    v_var:=upper('subham');
    DBMS_OUTPUT.PUT_LINE(v_var);
end;

--But with decode function we cannot do this
declare
v_var  VARCHAR2(10);
BEGIN
    v_var:=decode(:input,'S','subham','P','Priyanka','Nothing');
    DBMS_OUTPUT.PUT_LINE(v_var);
end;
--Decode can only be used with select statement not as a only function/expression
declare
v_var  VARCHAR2(10);
BEGIN
    select decode(:input,'S','subham','P','Priyanka','Nothing') into v_var from dual;
    DBMS_OUTPUT.PUT_LINE(v_var);
end;

--Here in case we can use it as standalone
DECLARE
    v_var  VARCHAR2(10);
BEGIN
    CASE :input 
                WHEN 'P' THEN v_var := 'PASS';
                WHEN 'F' THEN v_var := 'FAIL';
                ELSE v_var := 'NOT FOUND';
             END case;
    DBMS_OUTPUT.PUT_LINE(v_var);
END;
--Here we can use as a part of expression.
DECLARE
    v_var  VARCHAR2(10);
BEGIN
    v_var := CASE :input 
                WHEN 'P' THEN  'PASS'
                WHEN 'F' THEN 'FAIL'
                ELSE 'NOT FOUND'
             END;
    DBMS_OUTPUT.PUT_LINE(v_var);
END;
------------------Q10 end--------------

